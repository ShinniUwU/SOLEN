name: SOLEN CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*', 'V*' ]
    paths:
      - 'serverutils'
      - 'Scripts/**'
      - 'ci/**'
      - 'docs/fixtures/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'serverutils'
      - 'Scripts/**'
      - 'ci/**'
      - 'docs/fixtures/**'
      - '.github/workflows/ci.yml'
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Shellcheck Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install shellcheck
        run: |
          sudo apt-get update -y
          sudo apt-get install -y shellcheck
      - name: Run shellcheck
        run: |
          shellcheck --version
          # Relax severity and ignore common patterns we knowingly use in portable scripts
          ignores="SC1091,SC1090,SC2016,SC2034,SC2086,SC2046,SC2059,SC2164"
          shellcheck -s bash -S warning -e "$ignores" serverutils || echo "shellcheck warnings tolerated for serverutils"
          if find Scripts -type f -name '*.sh' -print -quit | grep -q .; then \
            find Scripts -type f -name '*.sh' -print0 | xargs -0 -r -n1 sh -c 'shellcheck -s bash -S warning -e "$0" "$@" || echo "shellcheck warnings tolerated: $@"' "$ignores" ; \
          else \
            echo "No scripts found under Scripts/" ; \
          fi

  validate:
    name: Validate JSON shape (${{ matrix.image }})
    runs-on: ubuntu-latest
    continue-on-error: true   # keep logs, donâ€™t block while stabilizing
    strategy:
      fail-fast: false
      matrix:
        image: [ 'debian:stable-slim', 'fedora:latest' ]
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v4
      - name: Install deps (Debian)
        if: startsWith(matrix.image, 'debian')
        run: |
          apt-get update -y
          DEBIAN_FRONTEND=noninteractive apt-get install -y bash jq iproute2 iputils-ping procps coreutils findutils gawk sed curl
      - name: Install deps (Fedora)
        if: startsWith(matrix.image, 'fedora')
        run: |
          dnf -y install bash jq iproute iputils procps-ng coreutils findutils gawk sed curl
      - name: Validate commands JSON shape
        env:
          SOLEN_NO_TUI: "1"
          SOLEN_PLAIN: "1"
          TERM: "dumb"
        run: |
          bash ci/validate-json.sh

  motd-noninteractive-smoke:
    name: MOTD Non-Interactive Smoke (${{ matrix.image }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: [ 'debian:stable-slim', 'fedora:latest' ]
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v4
      - name: Install deps (Debian)
        if: startsWith(matrix.image, 'debian')
        run: |
          apt-get update -y
          DEBIAN_FRONTEND=noninteractive apt-get install -y bash iproute2 iputils-ping procps coreutils findutils gawk sed
      - name: Install deps (Fedora)
        if: startsWith(matrix.image, 'fedora')
        run: |
          dnf -y install bash iproute iputils procps-ng coreutils findutils gawk sed
      - name: Smoke (should be silent in non-interactive)
        run: |
          export SOLEN_NO_TUI=1 SOLEN_PLAIN=1 TERM=dumb
          out=$(bash Scripts/motd/solen-motd.sh --full || true)
          if [ -n "$out" ]; then echo "Unexpected MOTD output in non-interactive mode:"; echo "$out"; exit 1; fi

  package-deb:
    name: Build .deb (on tag/release)
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build .deb
        run: |
          bash ci/build-deb.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: solen-deb
          path: dist/*.deb
      - name: Attach to release (if available)
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
